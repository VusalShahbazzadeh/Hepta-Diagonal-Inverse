#pragma kernel GetY
#pragma kernel GetZ
#pragma kernel SetLastColumns
#pragma kernel FinalizeInverse

#include "Core/MathOperations.hlsl"

RWStructuredBuffer<float> H;
RWStructuredBuffer<float> X;
RWStructuredBuffer<float> Y;
RWStructuredBuffer<float> Z;
RWStructuredBuffer<float> LastMofH;
RWStructuredBuffer<float> HInverse;

int2 dimension;

int currentColumn;


[numthreads(1, 1, 1)]
void GetY(uint3 id : SV_DispatchThreadID)
{
    int index = id.x * dimension.x + id.y;

    Y[index * stride + id.z] = X[index * stride + id.z];
}

[numthreads(1, 1, 1)]
void GetZ(uint3 id : SV_DispatchThreadID)
{
    int indexX = (id.x + dimension.y) * dimension.x + id.y;
    int indexZ = id.x * dimension.x + id.y;

    Z[indexZ * stride + id.z] = X[indexX * stride + id.z];
}

[numthreads(1, 1, 1)]
void SetLastColumns(uint3 id : SV_DispatchThreadID)
{
    int indexLMOH = id.x * dimension.x + id.y;
    int indexInverse = id.x * dimension.y + id.y + dimension.y - dimension.x;

    HInverse[indexInverse * stride + id.z] = LastMofH[indexLMOH * stride + id.z];
}



[numthreads(40, 1, 1)]
void FinalizeInverse(uint3 id : SV_DispatchThreadID)
{
    int indexInverse = id.x * dimension.y + currentColumn +MaxIfExceed;
    int indexH = id.x * dimension.y + id.x + dimension.x;
    int indexG = currentColumn * dimension.y + currentColumn + dimension.x;

    float Ei = id.x == currentColumn ? 1 :0;

    //Dot(HInverse, H, HInverse, id.x, currentColumn + dimension.x,indexInverse,dimension.y,currentColumn - dimension.x, currentColumn+1)

    for (int i =0; i < stride; i++)
    {
        float val = GetValue(HInverse, indexInverse, i);
        SetValue(HInverse, indexInverse, i, -val);
    }

    AddValue(HInverse, indexInverse, 0, Ei);

    
    Divide(HInverse, H, HInverse,indexInverse, indexG, indexInverse,a)
}


